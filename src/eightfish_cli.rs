use anchor_client::solana_sdk::pubkey::Pubkey;
use anchor_client::solana_sdk::signature::{Keypair, Signer};
use anchor_client::solana_sdk::system_instruction;
use anchor_client::{Client, Cluster};
use anyhow::Result;
use clap::Parser;
use eightfish_solana::constant::*;
use eightfish_solana::types::{EightFishId, Hash, ModelName, Payload};
use solana_sdk::commitment_config::CommitmentConfig;
use solana_sdk::signature::read_keypair_file;
use solana_sdk::system_program;
// The `accounts` and `instructions` modules are generated by the framework.
// The `accounts` and `instructions` modules are generated by the framework.
use eightfish_solana::accounts as eightfish_accounts;
use eightfish_solana::instruction as eightfish_instruction;
// The `accounts` and `instructions` modules are generated by the framework.
use crate::Opts;
use std::ops::Deref;
use std::rc::Rc;

pub async fn main() -> Result<()> {
    let opts = Opts::parse();

    // Wallet and cluster params.
    let payer = read_keypair_file(&*shellexpand::tilde("~/.config/solana/id.json"))
        .expect("Example requires a keypair file");
    let url = Cluster::Custom(
        "http://localhost:8899".to_string(),
        "ws://127.0.0.1:8900".to_string(),
    );

    // Client.
    let payer = Rc::new(payer);
    let client =
        Client::new_with_options(url.clone(), payer.clone(), CommitmentConfig::processed());

    println!("\nStarting async test...");
    update_index(&client, opts.pid).await?;
    // Success.
    Ok(())
}

pub async fn update_index<C: Deref<Target = impl Signer> + Clone>(
    client: &Client<C>,
    pid: Pubkey,
) -> Result<()> {
    println!("Pid: {}", pid);
    let program = client.program(pid)?;
    let authority = program.payer();
    let (counter, _) = Pubkey::find_program_address(&[EIGHTFISH_SEED], &pid);
    println!("Counter account: {}", counter);
    program
        .request()
        .accounts(eightfish_accounts::Initialize {
            authority: authority,
            merkle_tree: counter,
            eight_fish: counter,
            tree_controller: counter,
            payer: authority,
            compression_program: system_program::id(),
            system_program: system_program::id(),
            noop_program: system_program::id(),
        })
        .args(eightfish_instruction::UpdateIndex {
            model: ModelName("test".to_string()),
            reqid: Payload(vec![1, 2, 3]),
            id: EightFishId("123".to_string()),
            hash: Hash("123".to_string()),
        })
        .send()
        .await?;
    println!("Update success!");

    Ok(())
}
